ext.versions = [
        minSdk     : 21,
        targetSdk  : 33,
        compileSdk : 33
]

buildscript {
    apply from: "$project.rootDir/scripts/common.gradle"

    ext {
        //Studio
        kotlinVersion = '1.8.21'
        kspVersion = '1.8.21-1.0.11'

        //KTX
        ktxVersion = '1.10.1'

        //XML
        appcompatVersion = '1.6.1'
        materialVersion = '1.9.0'

        //Compose
        mapComposeVersion = '2.7.1'
        composeBomVersion = '2023.05.01'
        composeCompilerVersion = '1.4.7'

        //Navigation
        navVersion = '2.6.0'

        //database
        roomVersion = '2.5.2'

        //rxjava
        rxJavaVersion = '2.2.21'
        rxAndroidVersion = '2.1.1'

        //dagger
        daggerVersion = '2.46'
    }

    applyRepoManager(repositories)
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.0.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }

}

allprojects {
    apply from: "$project.rootDir/scripts/common.gradle"
    applyRepoManager(repositories)
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }

    }
}

subprojects {
    afterEvaluate {
        if (project.hasProperty("android")) {
            android {
                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_17
                    targetCompatibility JavaVersion.VERSION_17
                }

                if (project.hasProperty("kotlin")) {
                    kotlinOptions {
                        jvmTarget = JavaVersion.VERSION_17.toString()
                    }
                }
            }
        }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

tasks.register('cleanFull') {
    doLast {
        def javaHome = System.getProperty("java.home").replace(" ", "\\ ")
        String command = "export JAVA_HOME=$javaHome;" +
                "./gradlew clean cleanBuildCache;" +
                "rm -rf ~/.gradle/caches/build-cache-*"
        String[] cmd = ["bash", "-c", command]
        def execute = Runtime.getRuntime().exec(cmd, null, project.rootDir)
        execute.waitForProcessOutput(System.out, System.err)
    }
}